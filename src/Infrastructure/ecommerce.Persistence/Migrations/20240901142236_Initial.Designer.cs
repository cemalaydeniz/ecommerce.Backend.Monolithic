// <auto-generated />
using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ecommerce.Persistence.DbContexts;

#nullable disable

namespace ecommerce.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240901142236_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.Property<Guid>("UserRolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("UserRolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserUserRole");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Account.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StateOrProvince")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetLine2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailCount")
                        .HasColumnType("integer");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LockoutEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<Guid>("SecurityStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SoftDeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceInformation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<IPAddress>("IpAddress")
                        .IsRequired()
                        .HasColumnType("inet");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("RefreshToken", "ecommerce.Domain.Entities.Authentication.UserLogin.RefreshToken#Token", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("ExpirationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ValueEncypted")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("SoftDeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Token", "ecommerce.Domain.Entities.Authentication.UserToken.Token#Token", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("ExpirationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ValueEncypted")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Common.UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StorageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UploadedFiles");

                    b.HasDiscriminator().HasValue("UploadedFile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.Buyer", b =>
                {
                    b.HasBaseType("ecommerce.Domain.Entities.Authentication.User");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Buyers", (string)null);
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.Seller", b =>
                {
                    b.HasBaseType("ecommerce.Domain.Entities.Authentication.User");

                    b.Property<Guid?>("BillingAddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessAddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("TinNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.ComplexProperty<Dictionary<string, object>>("CreditCardInformation", "ecommerce.Domain.Entities.Authentication.Seller.CreditCardInformation#CreditCardInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CardHolderNameEncrypted")
                                .HasColumnType("text");

                            b1.Property<string>("CardNumberEncrypted")
                                .HasColumnType("text");

                            b1.Property<string>("CvvCodeEncrypted")
                                .HasColumnType("text");

                            b1.Property<string>("ExpirationDateEncrypted")
                                .HasColumnType("text");
                        });

                    b.HasIndex("BillingAddressId")
                        .IsUnique();

                    b.HasIndex("BusinessAddressId")
                        .IsUnique();

                    b.ToTable("Sellers", (string)null);
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.SellerUploadedFile", b =>
                {
                    b.HasBaseType("ecommerce.Domain.Entities.Common.UploadedFile");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("SellerId")
                        .HasColumnType("uuid");

                    b.HasIndex("SellerId");

                    b.HasDiscriminator().HasValue("SellerUploadedFile");
                });

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.HasOne("ecommerce.Domain.Entities.Authentication.UserRole", null)
                        .WithMany()
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecommerce.Domain.Entities.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Account.Address", b =>
                {
                    b.HasOne("ecommerce.Domain.Entities.Authentication.Buyer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("BuyerId");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.UserLogin", b =>
                {
                    b.HasOne("ecommerce.Domain.Entities.Authentication.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.UserToken", b =>
                {
                    b.HasOne("ecommerce.Domain.Entities.Authentication.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.Buyer", b =>
                {
                    b.HasOne("ecommerce.Domain.Entities.Authentication.User", null)
                        .WithOne()
                        .HasForeignKey("ecommerce.Domain.Entities.Authentication.Buyer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.Seller", b =>
                {
                    b.HasOne("ecommerce.Domain.Entities.Account.Address", "BillingAddress")
                        .WithOne()
                        .HasForeignKey("ecommerce.Domain.Entities.Authentication.Seller", "BillingAddressId");

                    b.HasOne("ecommerce.Domain.Entities.Account.Address", "BusinessAddress")
                        .WithOne()
                        .HasForeignKey("ecommerce.Domain.Entities.Authentication.Seller", "BusinessAddressId");

                    b.HasOne("ecommerce.Domain.Entities.Authentication.User", null)
                        .WithOne()
                        .HasForeignKey("ecommerce.Domain.Entities.Authentication.Seller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingAddress");

                    b.Navigation("BusinessAddress");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.SellerUploadedFile", b =>
                {
                    b.HasOne("ecommerce.Domain.Entities.Authentication.Seller", null)
                        .WithMany("UploadedFiles")
                        .HasForeignKey("SellerId");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.User", b =>
                {
                    b.Navigation("UserLogins");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.Buyer", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Authentication.Seller", b =>
                {
                    b.Navigation("UploadedFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
